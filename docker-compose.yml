services:
  
  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: password
      PGADMIN_LISTEN_PORT: 8001
    ports:
      - "8001:8001"


  s3:
    restart: always
    image: minio/minio:latest
    container_name: minio
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_PORT_UI:-9001}:9001"
    networks:
      - backend
    environment:
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-minio}
      - MINIO_SECRET_KEY=${MINIO_SECRET_ACCESS_KEY:-minio123}
    volumes:
      - minio_data:/data
    command: server /data --console-address :9001
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 60s
      timeout: 20s
      retries: 3

  postgres:
    image: postgres:latest  # Use an official PostgreSQL image instead of building
    profiles:
      - metaflow
    ports:
      - "6543:5432"
    networks:
      - backend
    environment:
      - POSTGRES_USER=${PG_USER:-metaflow}
      - POSTGRES_PASSWORD=${PG_PASSWORD:-metaflow}
      - POSTGRES_DB=${PG_DATABASE:-metaflow}
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Use a named volume for data persistence
      - ./dockerfiles/postgres:/docker-entrypoint-initdb.d  # Keep this for initialization scripts
    healthcheck:
      test: ["CMD", "pg_isready", "-p", "5432", "-U", "${PG_USER:-metaflow}"]
      interval: 60s
      timeout: 20s
      retries: 3

  create_s3_buckets:
    image: minio/mc:latest
    container_name: minio_create_bucket
    depends_on:
      - s3
    networks:
      - backend
    entrypoint: >
      /bin/sh -c '
      sleep 5;
      /usr/bin/mc config host add s3 http://s3:9000 ${MINIO_ACCESS_KEY:-minio} ${MINIO_SECRET_ACCESS_KEY:-minio123} --api S3v4;
      [[ ! -z "`/usr/bin/mc ls s3 | grep ${DATA_REPO_BUCKET_NAME_TP}`" ]] || /usr/bin/mc mb s3/${DATA_REPO_BUCKET_NAME_TP};
      /usr/bin/mc cp --recursive /dev/null s3/${DATA_REPO_BUCKET_NAME_TP}/data/;
      /usr/bin/mc cp --recursive /dev/null s3/${DATA_REPO_BUCKET_NAME_TP}/models/;
      /usr/bin/mc policy download s3/${DATA_REPO_BUCKET_NAME_TP};
      exit 0;
      '

  copy_data_to_s3:
    build: "./dockerfiles/minio_copy"
    container_name: minio_copy_bucket
    depends_on:
      create_s3_buckets:
        condition: service_completed_successfully
    networks:
      - backend
    entrypoint: >
      /bin/sh -c '
      sleep 5;
      /usr/bin/mc config host add s3 http://s3:9000 ${MINIO_ACCESS_KEY:-minio} ${MINIO_SECRET_ACCESS_KEY:-minio123} --api S3v4;
      /usr/bin/mc cp /breast_cancer.csv s3/${DATA_REPO_BUCKET_NAME_TP:-AMQ2}/data/breast_cancer.csv;
      
      exit 0;
      '
  redis:
    image: redis:latest
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/root/redis
      - redis_data:/usr/local/etc/redis/redis.conf
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-data}
      - REDIS_PORT=${REDIS_PORT:-data}
      - REDIS_DATABASES=${REDIS_DATABASES:-data}

networks:
  backend:
    driver: bridge

volumes:
  minio_data:
  redis_data:
  postgres_data:  
